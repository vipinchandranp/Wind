package com.fd.clientmgmt.dao;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TransactionRequiredException;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Fetch;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.metamodel.SetAttribute;
import javax.persistence.metamodel.SingularAttribute;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Repository;

import com.fd.clientmgmt.dao.util.Expression;
import com.fd.clientmgmt.dao.util.FilterNode;
import com.fd.clientmgmt.dao.util.Operator;
import com.fd.clientmgmt.entity.Address;
import com.fd.clientmgmt.entity.Client;
import com.fd.clientmgmt.entity.ClientAccountRelationship;
import com.fd.clientmgmt.entity.ClientAddressRelationship;
import com.fd.clientmgmt.entity.ClientClientRelationship;
import com.fd.clientmgmt.entity.ClientDetail; 
import com.fd.clientmgmt.entity.ClientEmploymentRelationship;
import com.fd.clientmgmt.entity.ClientIaRelationship;

@Repository
public class EntityDAOImpl implements EntityDAO {

	Logger logger = LogManager.getLogger(EntityDAOImpl.class);

	@PersistenceContext
	EntityManager em;

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<?> getEntity(FilterNode filterNode) throws Exception {
		List<?> entityList = null;
		ArrayList<Predicate> predicateList = new ArrayList<>();
		CriteriaBuilder builder = em.getCriteriaBuilder();
		CriteriaQuery criteriaQuery = builder.createQuery(filterNode.getEntityClass());
		criteriaQuery.distinct(true);
		try {
			Root<Class<?>> pRoot = criteriaQuery.from(filterNode.getEntityClass());
			criteriaQuery.select(pRoot);
			filter(criteriaQuery, builder, pRoot, null, filterNode, null, predicateList);
			if (!predicateList.isEmpty()) {
				Predicate[] predArray = new Predicate[predicateList.size()];
				predicateList.toArray(predArray);
				criteriaQuery.where(predArray);
			}

			TypedQuery<Class<?>> createQuery = em.createQuery(criteriaQuery);
			entityList = createQuery.getResultList();
		} catch (EntityExistsException ee) {
			logger.error("EntityExistsException while creating client" + ee);
			throw new EntityExistsException(ee.getMessage());
		} catch (IllegalArgumentException iae) {
			logger.error("IllegalArgumentException while creating client" + iae);
			throw new IllegalArgumentException(iae.getMessage());
		} catch (TransactionRequiredException tre) {
			logger.error("TransactionRequiredException while creating client" + tre);
			throw new TransactionRequiredException(tre.getMessage());
		} catch (Exception e) {
			logger.error("TransactionRequiredException while creating client" + e.getMessage());
			throw new Exception(e.getMessage());
		}
		return entityList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void filter(CriteriaQuery criteriaQuery, CriteriaBuilder builder, Root parent, Fetch child,
			FilterNode parentNode, FilterNode childNode, List predicateList) throws Exception {
		try {
			FilterNode currentNode = null;
			if (childNode == null && parentNode != null) {
				currentNode = parentNode;
			} else {
				currentNode = childNode;
			}
			for (Expression expression : currentNode.getExpressions()) {
				SingularAttribute propertyName = expression.getPropertyName();
				Operator operator = expression.getOperator();
				Object valueObject = expression.getValueObject();
				Predicate equal = null;
				switch (operator) {
				case EQUAL:
					if (child == null) {
						if (valueObject instanceof Long) {
							equal = builder.equal(parent.get(propertyName), valueObject);
						} else if (valueObject instanceof String) {
							equal = builder.equal(parent.get(propertyName), valueObject);
						} else if (valueObject instanceof Short) {
							equal = builder.equal(parent.get(propertyName), valueObject);
						} else if (valueObject instanceof Object) {
							Field[] declaredFields = valueObject.getClass().getDeclaredFields();
							for (Field f : declaredFields) {
								f.setAccessible(true);
								Object value = f.get(valueObject);
								if (value != null) {
									equal = builder.equal(parent.get(propertyName).get(f.getName()), value);
								}
							}
						}
					} else {
						equal = builder.equal(((Join<?, ?>) child).get(propertyName), valueObject);
					}
					predicateList.add(equal);
					break;
				case NOT_EQUAL:
				case CONTAINS:
				case NOT_CONTAINS:
				case IN:
				case NOT_IN:
				case BEGINS_WITH:
				case ENDS_WITH:
				default:
				}
			}
			for (SetAttribute setAttribute : currentNode.getChildFields()) {
				if (setAttribute == null) {
					continue;
				}
				if (child == null) {
					child = parent.fetch(setAttribute);
				} else if (parent == null) {
					child = child.fetch(setAttribute);
				} else if (child != null && parent != null) {
					child = parent.fetch(setAttribute);
				}
				FilterNode node = currentNode.getChildNodeMap().get(setAttribute);
				filter(criteriaQuery, builder, null, child, currentNode, node, predicateList);
			}

			for (SingularAttribute singularAttribute : currentNode.getSiblingFields()) {
				if (singularAttribute == null) {
					continue;
				}
				if (child == null) {
					child = parent.fetch(singularAttribute);
				} else if (parent == null) {
					child = child.fetch(singularAttribute);
				} else if (child != null && parent != null) {
					child = parent.fetch(singularAttribute);
				}
				FilterNode node = currentNode.getChildNodeMap().get(singularAttribute);
				filter(criteriaQuery, builder, null, child, currentNode, node, predicateList);
			}

		} catch (EntityExistsException ee) {
			logger.error("EntityExistsException while entity filter");
			throw new EntityExistsException(ee.getMessage());
		} catch (IllegalArgumentException iae) {
			logger.error("IllegalArgumentException while entity filter" + iae);
			throw new IllegalArgumentException(iae.getMessage());
		} catch (TransactionRequiredException tre) {
			logger.error("TransactionRequiredException while entity filter" + tre);
			throw new TransactionRequiredException(tre.getMessage());
		} catch (Exception e) {
			logger.error("TransactionRequiredException while entity filter" + e.getMessage());
			throw new Exception(e.getMessage());
		}
	}

	@SuppressWarnings("rawtypes")
	public FilterNode getFilterNodeFromEntity(Object entityObject,Object parentEntityObject, FilterNode filterNode) throws Exception {
		try {
			if (filterNode == null) {
				filterNode = new FilterNode(entityObject.getClass(), em);
			}
			String metamodelClassName = entityObject.getClass().getCanonicalName() + "_";
			Class metamodelClass = Class.forName(metamodelClassName);
			Field[] declaredFields = entityObject.getClass().getDeclaredFields();
			for (Field f : declaredFields) {
				f.setAccessible(true);
				Object value = f.get(entityObject);
				if (value == null ||(value !=null && value.equals(parentEntityObject))|| f.getType().getName().equalsIgnoreCase("long")) {
					continue;
				}else if (f.getType().getName().equalsIgnoreCase("java.lang.String")
						|| f.getType().getName().equalsIgnoreCase("java.lang.Long")
						|| f.getType().getName().equalsIgnoreCase("java.util.Date")
						|| f.getType().getName().equalsIgnoreCase("java.lang.Double")
						|| f.getType().getName().equalsIgnoreCase("java.lang.Short")
						|| f.getType().getName().equalsIgnoreCase("java.lang.Integer")) {
					filterNode.addCondition(f.getName(), Operator.EQUAL, value);
				} else if (value instanceof Collection<?>) {
					Field field = metamodelClass.getField(f.getName());
					Collection collectionObject = (Collection) f.get(entityObject);
					Iterator iterator = collectionObject.iterator();
					while (iterator.hasNext()) {
						Object obj = iterator.next();
						if (obj != null) {
							FilterNode childNode = new FilterNode(obj.getClass(), em);
							filterNode.addChild((SetAttribute) field.get(null), childNode);
							getFilterNodeFromEntity(obj,entityObject, childNode);
						}
					}

				} else if (value instanceof Object) {
					Field field = metamodelClass.getField(f.getName());
					FilterNode siblingNode = new FilterNode(value.getClass(), em);
					filterNode.addSibling((SingularAttribute) field.get(null), siblingNode);
					getFilterNodeFromEntity(value,entityObject, siblingNode);
				}
			}
		} catch (Exception e) {
			throw new Exception("Exception while creating Filternode from the entity object");
		}
		return filterNode;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public List getEntity(Object entityObject) throws Exception {
		List<?> entityList = null;
		try {
			FilterNode filterNode = getFilterNodeFromEntity(entityObject,null, null);
			entityList = getEntity(filterNode);
		} catch (Exception e) {
			throw new Exception("Exception while getting entity object");
		}
		return entityList;
	}

}
